[{"id":1598287740,"title":"Personal Notes on useEffect","author":"No author given","date":"August 24, 2020","time":"17:49","thumbnail":"/image/react-hook.png","content":"# In the Beginning...\n\nThe useEffect hook takes two parameters. The first parameter is a function that gets runs when the useEffect is triggered by some change, the presence of the second parameter is conditional.\n\nYou call the hook by passing a function that you want to run when a particular change occurs and this is determined by the presence of the second parameter mentioned above.\n\n1. If the second parameter is empty e.g\n\n```js\nuseEffect(() => {\n    console.log(\"render\")\n })\n```\n\nThe hook runs on every update (i.e. mount and re-render(s)) of parent functional component.\n\n2. If the second parameter is an empty array i.e.\n\n```js\nuseEffect(() => {\n    console.log(\"render\")\n}, [])\n```\n\nThe hook on runs on the first mount solely.\n\n3. If the second parameter is an array that contains one or two values, the hook is called when any of these values changes.\n\n```js\nuseEffect(() => {\n    console.log(\"render\")\n}, [name, email])\n```\n\nIn this case, the arguments name and email are passed to the useEffect hook, therefore it watches to see if there are changes to the values - this is what is referred to as a subscription in the React docs. \n\nYou can now see that the presence of the second parameter determines whether the function declared is in the useEffect runs or not. Therefore the useEffect depends on it and because it takes an array of arguments it is referred to as an array of dependencies.\n\nTherefore the useEffect hook can be visualized as a function written this way. \n\n```js\nconst previousValues = [];\nlet renderedOnMount = false;\n\nfunction useEffect = (func, dependency) => {\n\n  if (dependency === undefined) {\n    func();\n    return;\n  }\n\n  else if (dependency.length === 0 && !renderedOnMount) {\n    let renderedOnMount = true;\n\tfunc();\n\treturn;\n  }\n\n  else {\n    for (let index = 0; index < dependency.length; index++) {\n      if (previousValues[index] !== dependency[index]) {\n        previousValues = dependency;\n        func();\n        break;\n      }\n    }\n  }\n} \n```\n\n# and then came side effects\n\nSide effects can be referred to anything your function does that modifies the state of your application.\n\nWhen you are listening to a change in the state of a particular variable, we refer to that as a subscription and clearing that function is referred to as unsubscribing.\n\n```js\nimport React, { useState, useEffect } from \"react\";\nexport default function App() {\n\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const resizeHandler = () => {\n    setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", resizeHandler);\n      return () => {\n        window.removeEventListener(\"resize\", resizeHandler);\n      };\n  }, []);\n\n  return (\n    <div>\n      {windowWidth}\n    </div>\n  );\n}\n```\n\nThe code above listens for a change in the size of the window width and updates the value of windowWidth.\n\nBecause we only need to add the eventListener once, and that is on render, we pass an empty array of dependencies and the useEffect adds the eventListener and the width of the window is updated accordingly. We only need to unsubscribe from this when we unmount the component.\n\nIf you want to get the best use of the useEffect hook, you need to know what variables are changing and tailor the hook towards that end.\n\n## Note\n\nA component re-render is different from when the component mount because on mount the component is just getting introduced to the VDOM and it renders for the first time, rendering means to update the DOM with a new set of instructions for creating the DOM.\n\nIn functional components, every state change triggers a re-rendering. Understanding this will help you to understand how the hooks affect each other.","slug":"404","tags":["React"," React Hooks"]},{"id":1595272260,"title":"How to add tracked files to .gitignore","author":"No author given","date":"July 20, 2020","time":"20:11","thumbnail":"/image/github-mark.png","content":"\nAt one point or the other you might have committed some files or folders to your remote repo and after several commits you decide that you no longer want to track those files and you try to edit directly the .gitignore file but it doesn't work or sometimes I go as far as cutting the folder push a commit and paste the folder and add the folder to .gitignore then push as though it were a new one.\n\nThe reason for this issue is that the rules in your .gitignore only applies to untracked files therefore subsequent edits would apply to the following files and not the old ones.\n\nRun this \n```\ngit rm -r --cached directory-to-remove\ngit commit -m 'feat: remove \" directory-to-remove\" from remote repo'\ngit push origin master\n```\n\n```\ngit rm -r --cached directory-to-remove\n```\nThis command provides you with a preview of what is going to be deleted from your git cache.\n\n\nHowever you need to note that this doesn't remove the history of the file or folder from your git history and make it appear as though it never existed. To do that you can check out [BFG Repo Cleaner](!https://rtyley.github.io/bfg-repo-cleaner/) or you use `git filter-branch`. [Check out this guide](!https://docs.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository#using-filter-branchs) on how to use it.\n\nHave fun!","slug":"how-to-add-tracked-files-to-gitignore","tags":["git","react","deployment"]},{"id":1595272260,"title":"About Startups and Ideas","author":"No author given","date":"July 20, 2020","time":"20:11","thumbnail":"/image/death-note-L.jpg","content":"### Inception\nThis is a self rant. I tried as much as possible, albeit lazily, to make the presentation of my thoughts cohesive but let's see how well that worked out. If it turns out bad, blame Dance Monkey.\n\n### Getting Ready\nMy journey has a software developer began professional roughly 6 months ago thanks to my internship :D and I have gotten my fair share of getting offers to work with someone on one cool idea that is going to shake up the eCommerce or Social Media industry and well we know how it goes, you get offered equity and some small cash if you are lucky and sometimes you are advised to look at the long time benefits of \"pioneering\" an existing platform but here in Africa. \n\nRejecting these offers is all good until it is a family member or someone that you look up to in a way and you are paced in a difficult spot. You don't know how best to present the reasons why you are saying no and it looks like a betrayal of trust and you somehow have the light burden of thinking that you let someone down. This worsens if it someone you see every day or somehow can't ignore their presence but hang on.\n\n### The Canvas\nYou know what? It is fine to have ideas and paint the future bright and colourful but remember that you are the only one seeing that \"unique\" future and that you are not the only person that has this type of dream, there are thousands and I daresay millions with an idea that looks exactly like yours so what is going to make yours stand out and worth pursuing?\n\nThat is if you think I don't have my fair share of million dollars app or business idea and I want to sit in the corporate world hoping to work my ass off for some trillionaire employer. At my workplace, I have ideas almost every week and I am sure they miss me talking to them about such ideas.\n\n### The Palette\nSo what is going to make me drop my ideas for yours? Well, to know if you are serious, Money!!! Yup, it is a Money Driven Development. Or to be professional the funding. Something has to continually oil the gears. There has to be a sense of financial security from one end which I don't have at the moment. \n\nThat is what you are going to fall back on when it doesn't work out at some point. Nobody, at least that I know of, wants to work in a startup for 6 months and when it doesn't work out starts to complain he doesn't have one money or something, come off it my friend, you are talking in the rubbish.\n\n### Painting the Story\nAnother thing is that a good number of these founders think an Uber or YouTube clone can be ready in 3 months and they can be ready to launch by the 4th quarter and bam in a year or two you are rocking in the Maldives or some Caribbean resort, ahh dreams are nice and wonderful. \n\nApart from trying to convince people to work with you, how are you going to push your product and drive market adoption without needing to involve people at one point or the other. And if you are going to involve people, they are not going to work for free and would need some sort of compensation too.\n\n### The Finishing \nAnd yes, there are founders out there who didn't have a single dime on them to start their business but somehow they got people to work with them and now they are role models but what kept the people going is the concept of a shared vision. This is what gives the people around you the energy to keep going against all odds but let's be honest it takes someone that is in your circle to have this kind of synergy.\n\n### Subtle Details\nI believe it is possible to work in the corporate world and you get to live the life you have dreamed of. I believe that it is possible to get someone you don't know to work on a project for free but it takes work and a lot of convincing to do so. This is easier if there is a shared burden.\n\n### Exhibition\nSo yeah it is amazing to have ideas and all but you need money to get it running if you don't have it try to get it. Blessings.","slug":"about-startup-and-ideas","tags":["thoughts"," swe"]},{"id":1595099460,"title":"Using GitHub Pages to deploy your GitHub Project","author":"No author given","date":"July 18, 2020","time":"20:11","thumbnail":"/image/github-pages.jpeg","content":"\nGitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.\n\nIt was created by GitHub to allow developers to host their projects directly from a GitHub repository without having to pay for domain cost.\n\nYou can publish a website about to `https://<username>.github.io` and your project to `https://<username>.github.io/{your-project-name}`.\n\nThe purpose of this article is to guide you through publish your project with gh-pages whether it is a plain HTML, CSS & JavaScript project or it is built with React xD.\n\n\n### Plain HTML, CSS & JS\n1. If your website contains images make sure that they are not stored in a media folder as gh-pages doesn't parse relative imports well. You may have to upload your images to a service like Cloudinary.\n\n2. With that out of the way, navigate to your repository settings and locating the GitHub Pages section\n![image](https://i.imgur.com/5ZlMuH7.png)\n\n3. Select the master branch from the drop down menu and this triggers a refresh.\n![image](https://i.imgur.com/PDUMDMZ.png)\n\n4. When the page is done refreshing, navigate back to the GitHub Pages section and it should be active with the URL to the live project active.\n![image](https://i.imgur.com/T7EH5CC.png)\n\nNote that because of this setting each commit you make to the master branch updates the live project too.\n\n### React Project.\n1. Install gh-pages by running\n\n`npm install gh-pages` or `yarn add gh-pages`\n\nThis packages creates a `gh-pages` branch that would hold the build files for your project.\n\n2. In your package.json file\nadd the following line \n``` \n\"homepage\": \"https://<username>.github.io/<repo-name>\",\n```\n\nNote that the repo name can be anything not necessarily generic.\n\n3. Also update your scripts to contain \n```\n  \"scripts\": {\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\",\n    ....\n   },\n```\n\nThe predeploy command generates a build that is ready to be published while the deploy command generates a build then deploys it\n4. When you are ready run \n```\nnpm run deploy\n```\n\nWait for it to finish deploying the site and check the URL you set as homepage in your package.json to view it.\n\nIf you get the error \n`git remote add origin https://github.com/lilpolymath/test-repo.git\ngit push -u origin master`\nrun \n```\nrm -rf node_modules/gh-pages/.cache\n```\nthat clears the cache for you and rerun the deploy command.","slug":"using-github-pages-to-deploy-your-github-project","tags":["react"," github"," static"]}]