[
  {
    "id": 1595272260,
    "title": "Test post",
    "author": "No author given",
    "date": "July 20, 2020",
    "time": "20:11",
    "thumbnail": "../image/death-note-L.jpg",
    "content": "\nHow to add tracked files to .gitignore\n\nAt one point or the other you might have committed some files or folders to your remote repo and after several commits you decide that you no longer want to track those files and you try to edit directly the .gitignore file but it doesn't work or sometimes I go as far as cutting the folder push a commit and paste the folder and add the folder to .gitignore then push as though it were a new one.\n\nThe reason for this issue is that the rules in your .gitignore only applies to untracked files therefore subsequent edits would apply to the following files and not the old ones.\n\nRun this \n```\ngit rm -r --cached directory-to-remove\ngit commit -m 'feat: remove \" directory-to-remove\" from remote repo'\ngit push origin master\n```\n\n```\ngit rm -r --cached directory-to-remove\n```\nThis command provides you with a preview of what is going to be deleted from your git cache.\n\n\nHowever you need to note that this doesn't remove the history of the file or folder from your git history and make it appear as though it never existed. To do that you can check out [BFG Repo Cleaner](!https://rtyley.github.io/bfg-repo-cleaner/) or you use `git filter-branch`. Check out this (guide)[!https://docs.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository#using-filter-branchs] on how to use it.\n\nHave fun!",
    "slug": "test-post-three",
    "tags": ["test"]
  },
  {
    "id": 1595099460,
    "title": "Test post",
    "author": "No author given",
    "date": "July 18, 2020",
    "time": "20:11",
    "thumbnail": "../image/death-note-L.jpg",
    "content": "\n## Using GitHub Pages to deploy your GitHub Project\n\nGitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.\n\nIt was created by GitHub to allow developers to host their projects directly from a GitHub repository without having to pay for domain cost.\n\nYou can publish a website about to `https://<username>.github.io` and your project to `https://<username>.github.io/{your-project-name}`.\n\nThe purpose of this article is to guide you through publish your project with gh-pages whether it is a plain HTML, CSS & JavaScript project or it is built with React xD.\n\n\n### Plain HTML, CSS & JS\n1. If your website contains images make sure that they are not stored in a media folder as gh-pages doesn't parse relative imports well. You may have to upload your images to a service like Cloudinary.\n\n2. With that out of the way, navigate to your repository settings and locating the GitHub Pages section\n![image](https://i.imgur.com/5ZlMuH7.png)\n\n3. Select the master branch from the drop down menu and this triggers a refresh.\n![image](https://i.imgur.com/PDUMDMZ.png)\n\n4. When the page is done refreshing, navigate back to the GitHub Pages section and it should be active with the URL to the live project active.\n![image](https://i.imgur.com/T7EH5CC.png)\n\nNote that because of this setting each commit you make to the master branch updates the live project too.\n\n### React Project.\n1. Install gh-pages by running\n\n`npm install gh-pages` or `yarn add gh-pages`\n\nThis packages creates a `gh-pages` branch that would hold the build files for your project.\n\n2. In your package.json file\nadd the following line \n``` \n\"homepage\": \"https://<username>.github.io/<repo-name>\",\n```\n\nNote that the repo name can be anything not necessarily generic.\n\n3. Also update your scripts to contain \n```\n  \"scripts\": {\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\",\n    ....\n   },\n```\n\nThe predeploy command generates a build that is ready to be published while the deploy command generates a build then deploys it\n4. When you are ready run \n```\nnpm run deploy\n```\n\nWait for it to finish deploying the site and check the URL you set as homepage in your package.json to view it.\n\nIf you get the error \n`git remote add origin https://github.com/lilpolymath/test-repo.git\ngit push -u origin master`\nrun \n```\nrm -rf node_modules/gh-pages/.cache\n```\nthat clears the cache for you and rerun the deploy command.",
    "slug": "test-post-one",
    "tags": ["test", " swe"]
  },
  {
    "id": 1594926660,
    "title": "Test post",
    "author": "No author given",
    "date": "July 16, 2020",
    "time": "20:11",
    "thumbnail": "../image/death-note-L.jpg",
    "content": "![Test image](placeholder-6-.png \"Gravity Headers\")\n\n## Background\n\nThere are a couple of issues that users face while integrating or working with Netlify CMS and while the community is doing their best fixing them, here is a list of known issues and their solutions.\n\n## API Errors\n\nA list of error messages and their possible cause(s) to provide more context while debugging.\n\n#### 1. Error Message.\n\n```\nAPI_ERROR: {\"message\":\"404 File Not Found\"}\n```\n\n#### Possible Causes.\n\n* The collection folder or file property is missing a value (a dedicated file or folder, can't be blank or root). The file or folder should be relative to root (so `src/posts` for example).\n* There are subfolders within the collection folder.\n\n#### 2. Error Message\n\n```\nAPI_ERROR: Not Found\n```\n\n#### Possible Cause\n\n* The media library folder is missing, or the value of the media library property within config.yml isn't correct.\n\n#### 3. Error Message\n\n```\nAPI_ERROR: Not Found\n```\n\n#### Possible Cause\n\n* The org account needs to grant access to your Netlify CMS instance. [More details](https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/requesting-organization-approval-for-oauth-apps).\n\n#### 4. Error Message\n\n```\nFailed to load settings from /.netlify/identity\n```\n\n#### Possible Cause\n\n* config.yml has git-gateway as a backend on a site that isn't hosted on Netlify.\n\n## Other Issues\n\n#### 1. Invited Users Email not Confirmed.\n\nIf you’ve invited some users and opened the invitation link from the generated emails but as they try to log in they get the following error message:\n\n```\nEmail not confirmed\n```\n\n#### Possible Solutions.\n\n* Add the identity widget to your homepage `<head>`. The upside of this method is that it’s fast and easy, no other configuration needed. The downside is that all of your users are downloading the widget while they might not need it. That’s kb’s wasted. Unless you’re using Netlify Identity for something else than the authentication of CMS users, utilize the next solution.\n* Change the invitation emails! This takes a bit more time, but it’s probably the cleanest solution. You already have the identity widget loaded at your `admin/` page, so you might as well have your users confirm their email there. Learn how to update your invitation emails [here](https://docs.netlify.com/visitor-access/identity/identity-generated-emails/#email-templates).\n\nCredits to [@tomrutgers](https://github.com/tomrutgers). Check here for [more details](https://community.netlify.com/t/common-issue-netlify-cms-git-gateway-email-not-confirmed/10690).\n\n#### 2. Invitation Email not Received.\n\nIf you deployed Netlify CMS to Netlify using a template and didn't receive an invitation email after deploying the site, check your email settings to make sure that your email provider doesn't block emails from no-reply@netlify.com.\n\n#### 3. Mobile responsiveness.\n\nTo make Netlify CMS responsive for usage on mobile, [here](https://gist.github.com/lilpolymath/51082130d316df3a938648569077c933) is a temporary CSS solution to include to your `admin/index.html` below your closing `</body>` tag so it can overwrite netlify-generated css.\n\nCredits to [truongoi](https://github.com/truongoi).",
    "slug": "test-post-two",
    "tags": ["test"]
  }
]
